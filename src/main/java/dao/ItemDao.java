package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Auction;
import model.Bid;
import model.Employee;
import model.Item;

public class ItemDao {
public List<Item> getItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of all the items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getItemsQuery = "SELECT * FROM items";
			ResultSet rs = st.executeQuery(getItemsQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("description"));
				item.setItemID(rs.getInt("itemID"));
				item.setName(rs.getString("name"));
				item.setNumCopies(rs.getInt("numCopies"));
				item.setSoldPrice(rs.getInt("soldPrice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearManufactured"));
				items.add(item);
			}
		}
		catch(Exception e) {
			System.out.println(e);
		}
		/*Sample data ends*/
		return items;

	}


public List<Item> getBestsellerItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of the bestseller items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
		
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getBestSellerItemsQuery = "SELECT * FROM items i inner join auction a "
					+ "on i.itemID = a.itemID "
					+ "Where i.soldPrice != 0 or i.soldPrice !=null "
					+ "Order by a.copiessold DESC ;";
					
			ResultSet rs = st.executeQuery(getBestSellerItemsQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("description"));
				item.setItemID(rs.getInt("itemID"));
				item.setName(rs.getString("name"));
				item.setNumCopies(rs.getInt("numCopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		return items;

	}

public List<Item> getSummaryListing(String searchKeyword) {

/*
 * The students code to fetch data from the database will be written here
 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
 */

List<Item> items = new ArrayList<Item>();
		
/*Sample data begins*/
try {
	Class.forName("com.mysql.jdbc.Driver");
	Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
	Statement st = con.createStatement();
	String summaryListingItemNameQuery = "SELECT i.soldprice, a.copiessold, i.type, i.name, i.description "
			+ "FROM items i INNER JOIN auction a on a.itemid = i.itemID "
			+ "WHERE i.name = '" + searchKeyword + "' or i.type = '" + searchKeyword + "'";
	ResultSet rs = st.executeQuery(summaryListingItemNameQuery);
	if(rs == null) {
		return items;
	}
	else {
		while(rs.next()) {
		Item item = new Item();
		item.setName(rs.getString("name"));
		item.setType(rs.getString("type"));
		item.setDescription(rs.getString("description"));
		item.setSoldPrice(rs.getInt("copiessold") * rs.getInt("soldprice"));
		items.add(item);
	}}
			
}

catch(Exception e) {
	System.out.println(e);
}


/*Sample data ends*/

return items;

}


	public List<Item> getItemSuggestions(String customerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 */

		List<Item> items = new ArrayList<Item>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String itemSuggestionQuery = "SELECT i.itemID, name, type, numCopies\r\n"
					+ "FROM (\r\n"
					+ "        SELECT i.type AS item_type, COUNT(i.type) AS item_count\r\n"
					+ "        FROM bid b\r\n"
					+ "                 RIGHT JOIN auction a ON a.auctionid = b.auctionid\r\n"
					+ "                 LEFT JOIN items i ON a.itemid = i.itemID\r\n"
					+ "        WHERE b.sold = TRUE\r\n"
					+ "          and b.currentwinner = '123456789'\r\n"
					+ "        GROUP BY i.type\r\n"
					+ "        ORDER BY item_count DESC\r\n"
					+ "        LIMIT 1\r\n"
					+ "    ) rs\r\n"
					+ "        LEFT JOIN items i ON i.type = rs.item_type;\r\n";
			ResultSet rs = st.executeQuery(itemSuggestionQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("description"));
				item.setItemID(rs.getInt("itemid"));
				item.setName(rs.getString("itemname"));
				item.setNumCopies(rs.getInt("numcopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}		
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		/*Sample data ends*/
		
		return items;

	}

	public List getItemsBySeller(String sellerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
		 */
		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String itemsBySellerItemQuery = "select * "
					+ "from items it "
					+ "inner join auction auc "
					+ "on auc.itemid = it.itemID "
					+ "inner join post p "
					+ "on p.auctionid = auc.auctionid "
					+ "where p.customerid = '" + sellerID + "'";
	
			ResultSet r1 = st.executeQuery(itemsBySellerItemQuery);		
			
			while(r1.next()) {
				int itemId = r1.getInt("itemid");
				Item item = new Item();
				item.setDescription(r1.getString("Description"));
				item.setItemID(r1.getInt("itemid"));
				item.setName(r1.getString("name"));
				item.setNumCopies(r1.getInt("numcopies"));
				item.setSoldPrice(r1.getInt("soldprice"));
				item.setType(r1.getString("type"));
				item.setYearManufactured(r1.getInt("yearmanufactured"));
				items.add(item);
				
				Auction auction = new Auction();
				auction.setAuctionID(r1.getInt("auctionid"));
				auction.setBidIncrement(r1.getFloat("bidincrement"));
				auction.setMinimumBid(r1.getFloat("minimumbid"));
				auction.setCopiesSold(r1.getInt("copiessold"));
				auction.setMonitor(r1.getInt("monitor"));
				auction.setItemID(r1.getInt("itemid"));
				auctions.add(auction);
				
				String itemsBySellerQueryBid = "SELECT * from bid WHERE auctionid = '" + r1.getInt("auctionid")+ "'";
				ResultSet r2 = st.executeQuery(itemsBySellerQueryBid);
				while(r2.next()) {
					Bid bid = new Bid();
					bid.setCustomerID(r2.getString("customerid"));
					bid.setAuctionID(r2.getInt("auctionid"));
					bid.setBidPrice(r2.getFloat("bidprice"));
					bid.setMaxBid(r2.getFloat("maxbid"));
					bid.setBidTime(r2.getString("bidtime"));
					bids.add(bid);
				}
			}
			
				
		}
		catch(Exception e) {
			System.out.println(e);
		}
		/*Sample data ends*/
		
		output.add(items);
		output.add(bids);
		output.add(auctions);
		
		return output;
	}


	public List<Item> getItemTypes() {

/*
 * The students code to fetch data from the database will be written here
 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
 * A query to fetch the unique item types has to be implemented
 * Each item type is to be added to the "item" object using setType method
 */

		List<Item> items = new ArrayList<Item>();

/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getTypesQuery = "Select type FROM items";
			ResultSet rs = st.executeQuery(getTypesQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setType(rs.getString("type"));
				items.add(item);
			}
		}

		catch(Exception e) {
			System.out.println(e);
		}
/*Sample data ends*/

		return items;
	}


	public List getItemsByName(String itemName) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getItemByNameQuery = "SELECT * FROM items WHERE name LIKE '%" + itemName + "%'";
			ResultSet rs2 = st.executeQuery(getItemByNameQuery);
			while(rs2.next()) {
				Item item = new Item();
				item.setDescription(rs2.getString("description"));
				item.setItemID(rs2.getInt("itemID"));
				item.setName(rs2.getString("name"));
				item.setNumCopies(rs2.getInt("numcopies"));
				item.setSoldPrice(rs2.getInt("soldprice"));
				item.setType(rs2.getString("type"));
				item.setYearManufactured(rs2.getInt("yearmanufactured"));
				items.add(item);
			}
			String getItemAuctionQuery = "SELECT * FROM auction, items WHERE items.name = '" +itemName+"' AND "
					+ "items.itemID = auction.itemid" ; //Go through auctions with the grabbed item id and get the auction info and put in the auctions list
			ResultSet r3 = st.executeQuery(getItemAuctionQuery);
			while(r3.next()) {
				Auction auction = new Auction();
				auction.setAuctionID(r3.getInt("auctionid"));
				auction.setBidIncrement(r3.getFloat("bidincrement"));
				auction.setMinimumBid(r3.getFloat("minimumbid"));
				auction.setCopiesSold(r3.getInt("copiessold"));
				auction.setMonitor(r3.getInt("monitor"));
				auction.setItemID(r3.getInt("itemID"));
				auctions.add(auction);
			}
		}
			
		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List getItemsByType(String itemType) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();              
				
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String itemByTypeQuery = "SELECT * FROM auction a, items i "
					+ "WHERE i.type='" + itemType + "' and a.itemid = i.itemID;";
		   String getItemIDsofTypeQuery = "SELECT * FROM items WHERE type ='" + itemType+ "';";
			ResultSet r1 = st.executeQuery(itemByTypeQuery);
			while(r1.next()) {
				Auction auction = new Auction();
				System.out.println(r1.getInt("auctionid"));
				auction.setAuctionID(r1.getInt("auctionid"));
				auction.setBidIncrement(r1.getFloat("bidincrement"));
				auction.setMinimumBid(r1.getFloat("minimumbid"));
				auction.setCopiesSold(r1.getInt("copiessold"));
				auction.setMonitor(r1.getInt("monitor"));
				auction.setItemID(r1.getInt("itemid"));
				auctions.add(auction);
			}
			
			ResultSet r2 = st.executeQuery(getItemIDsofTypeQuery);
			while(r2.next()) {
				Item item = new Item();
				item.setDescription(r2.getString("description"));
				item.setItemID(r2.getInt("itemid"));
				item.setName(r2.getString("name"));
				item.setNumCopies(r2.getInt("numcopies"));
				item.setSoldPrice(r2.getInt("soldprice"));
				item.setType(r2.getString("type"));
				item.setYearManufactured(r2.getInt("yearmanufactured"));
				items.add(item);
		 }
		
			
		}
	
		catch(Exception e) {
			System.out.println(e);
		}	
		
		
		
		/*Sample data ends*/
		
		output.add(items);
		output.add(auctions);
		
		return output;
	}


	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();
				 
		/*Sample data begins*/        //Best Sellers for a customers own items
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/auction", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getBestSellerItemsQuery = "SELECT * "
					+ "From items i, post p"
					+ " inner join auction a on p.auctionid = a.auctionid "
					+ "where p.customerid = '" + customerID + "' and a.itemid = i.itemID "
					+ "order by a.copiesSold DESC";
			ResultSet rs = st.executeQuery(getBestSellerItemsQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("description"));
				item.setItemID(rs.getInt("itemid"));
				item.setName(rs.getString("name"));
				item.setNumCopies(rs.getInt("numcopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		return items;

	}

}
