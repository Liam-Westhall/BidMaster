package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Auction;
import model.Bid;
import model.Employee;
import model.Item;

public class ItemDao {

	
	public List<Item> getItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of all the items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getItemsQuery = "SELECT * FROM items";
			ResultSet rs = st.executeQuery(getItemsQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("itemid"));
				item.setName(rs.getString("itemname"));
				item.setNumCopies(rs.getInt("numcopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}
		}

		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		return items;

	}
	
	public List<Item> getBestsellerItems() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of the bestseller items has to be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" List
		 */

		List<Item> items = new ArrayList<Item>();
		
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getBestSellerItemsQuery = "SELECT i.name, COUNT(i.name) AS sold_count\r\n"
					+ "FROM bid b\r\n"
					+ "        RIGHT JOIN auction a ON a.auctionid = b.auction_id\r\n"
					+ "        LEFT JOIN items i ON a.itemid = i.itemID\r\n"
					+ "WHERE b.sold = TRUE\r\n"
					+ "GROUP BY i.name\r\n"
					+ "ORDER BY sold_count DESC\r\n"
					+ "LIMIT 5;\r\n"
					+ "";
			ResultSet rs = st.executeQuery(getBestSellerItemsQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("itemid"));
				item.setName(rs.getString("itemname"));
				item.setNumCopies(rs.getInt("numcopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		return items;

	}

	public List<Item> getSummaryListing(String searchKeyword) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch details of summary listing of revenue generated by a particular item or item type must be implemented
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * Store the revenue generated by an item in the soldPrice attribute, using setSoldPrice method of each "item" object
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String summaryListingItemNameQuery = "SELECT i.name, ROUND(SUM(b.maximum_bid), 2) AS revenu\r\n"
					+ "FROM bid b\r\n"
					+ "        RIGHT JOIN auction a ON a.auctionid = b.auction_id\r\n"
					+ "        LEFT JOIN items i ON a.itemid = i.itemID\r\n"
					+ "WHERE b.sold = TRUE\r\n"
					+ " and i.name = 'Titanic'\r\n"
					+ "GROUP BY i.name;\r\n";
			String summaryListingItemTypeQuery = "SELECT i.type, ROUND(SUM(b.maximum_bid), 2) AS revenu\r\n"
					+ "FROM bid b\r\n"
					+ "        RIGHT JOIN auction a ON a.auctionid = b.auction_id\r\n"
					+ "        LEFT JOIN items i ON a.itemid = i.itemID\r\n"
					+ "WHERE b.sold = TRUE\r\n"
					+ " and i.type = 'DVD'\r\n"
					+ "GROUP BY i.type;\r\n";
			ResultSet rs = st.executeQuery(summaryListingItemNameQuery);
			if(rs == null) {
				ResultSet rs2 = st.executeQuery(summaryListingItemTypeQuery);
				Item item = new Item();
				item.setType(rs2.getString("type"));
				item.setSoldPrice(rs2.getInt("revenue"));
				items.add(item);
			}
			else {
				Item item = new Item();
				item.setName(rs.getString("name"));
				item.setSoldPrice(rs.getInt("revenue"));
				items.add(item);
			}
					
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		
		
		/*Sample data ends*/
		
		return items;

	}

	public List<Item> getItemSuggestions(String customerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch item suggestions for a customer, indicated by customerID, must be implemented
		 * customerID, which is the Customer's ID for whom the item suggestions are fetched, is given as method parameter
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 */

		List<Item> items = new ArrayList<Item>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String itemSuggestionQuery = "SELECT i.itemID, name, type, available_copy\r\n"
					+ "FROM (\r\n"
					+ "        SELECT i.type AS item_type, COUNT(i.type) AS item_count\r\n"
					+ "        FROM bid b\r\n"
					+ "                 RIGHT JOIN auction a ON a.auctionid = b.auction_id\r\n"
					+ "                 LEFT JOIN items i ON a.itemid = i.itemID\r\n"
					+ "        WHERE b.sold = TRUE\r\n"
					+ "          and b.current_winner = '123456789'\r\n"
					+ "        GROUP BY i.type\r\n"
					+ "        ORDER BY item_count DESC\r\n"
					+ "        LIMIT 1\r\n"
					+ "    ) rs\r\n"
					+ "        LEFT JOIN items i ON i.type = rs.item_type;\r\n";
			ResultSet rs = st.executeQuery(itemSuggestionQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("itemid"));
				item.setName(rs.getString("itemname"));
				item.setNumCopies(rs.getInt("numcopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}		
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		/*Sample data ends*/
		
		return items;

	}

	public List getItemsBySeller(String sellerID) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Query to fetch items sold by a given seller, indicated by sellerID, must be implemented
		 * sellerID, which is the Sellers's ID who's items are fetched, is given as method parameter
		 * The bid and auction details of each of the items should also be fetched
		 * The bid details must have the highest current bid for the item
		 * The auction details must have the details about the auction in which the item is sold
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each bid record is required to be encapsulated as a "Bid" class object and added to the "bids" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items, bids and auctions Lists have to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String itemsBySellerItemQueryauction = "SELECT * from auction WHERE customerid = " + sellerID;
			String itemsBySellerItemQueryBid = "SELECT * from bid WHERE customerid = " + sellerID;
			ResultSet r1 = st.executeQuery(itemsBySellerItemQueryauction);
			ResultSet r2 = st.executeQuery(itemsBySellerItemQueryBid);
			
			while(r1.next()) {
				int itemId = r1.getInt("itemid");
				String getItemsBySellerItemQueryItem = "SELECT * from item WHERE itemid = " + itemId;
				ResultSet r3 = st.executeQuery(getItemsBySellerItemQueryItem);
				while(r3.next()) {
					Item item = new Item();
					item.setDescription(r3.getString("Description"));
					item.setItemID(r3.getInt("itemid"));
					item.setName(r3.getString("itemname"));
					item.setNumCopies(r3.getInt("numcopies"));
					item.setSoldPrice(r3.getInt("soldprice"));
					item.setType(r3.getString("type"));
					item.setYearManufactured(r3.getInt("yearmanufactured"));
					items.add(item);
				}
			
			}
			while(r1.next()) {
				Auction auction = new Auction();
				auction.setAuctionID(r1.getInt("auctionid"));
				auction.setBidIncrement(r1.getFloat("bidincrement"));
				auction.setMinimumBid(r1.getFloat("minimumbid"));
				auction.setCopiesSold(r1.getInt("copiesold"));
				auction.setMonitor(r1.getInt("monitor"));
				auction.setItemID(r1.getInt("itemid"));
				auctions.add(auction);
			}
			while(r2.next()) {
				Bid bid = new Bid();
				bid.setCustomerID(r2.getString("customerid"));
				bid.setAuctionID(r2.getInt("auctionid"));
				bid.setBidPrice(r2.getFloat("bidprice"));
				bid.setMaxBid(r2.getFloat("maximumbid"));
				bid.setBidTime(r2.getString("bidtime"));
				bids.add(bid);
			}
				
		}
		catch(Exception e) {
			System.out.println(e);
		}
		/*Sample data ends*/
		
		output.add(items);
		output.add(bids);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getItemTypes() {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList
		 * A query to fetch the unique item types has to be implemented
		 * Each item type is to be added to the "item" object using setType method
		 */
		
		List<Item> items = new ArrayList<Item>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getTypesQuery = "Select type FROM item";
			ResultSet rs = st.executeQuery(getTypesQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setType(rs.getString("type"));
				items.add(item);
			}
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		/*Sample data ends*/
		
		return items;
	}

	public List getItemsByName(String itemName) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemName, which is the item's name on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemName in their name has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();
		
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getItemByNameQuery = "SELECT * FROM items WHERE itemname = " + itemName;
			ResultSet rs2 = st.executeQuery(getItemByNameQuery);
			while(rs2.next()) {
				Item item = new Item();
				item.setDescription(rs2.getString("Description"));
				item.setItemID(rs2.getInt("itemid"));
				item.setName(rs2.getString("itemname"));
				item.setNumCopies(rs2.getInt("numcopies"));
				item.setSoldPrice(rs2.getInt("soldprice"));
				item.setType(rs2.getString("type"));
				item.setYearManufactured(rs2.getInt("yearmanufactured"));
				items.add(item);
			}
			while(rs2.next()) {
				String getItemAuctionQuery = "SELECT * FROM auction WHERE itemid = "; //Go through auctions with the grabbed item id and get the auction info and put in the auctions list
				ResultSet r3 = st.executeQuery(getItemAuctionQuery);
				while(r3.next()) {
					Auction auction = new Auction();
					auction.setAuctionID(r3.getInt("auctionid"));
					auction.setBidIncrement(r3.getFloat("bidincrement"));
					auction.setMinimumBid(r3.getFloat("minimumbid"));
					auction.setCopiesSold(r3.getInt("copiesold"));
					auction.setMonitor(r3.getInt("monitor"));
					auction.setItemID(r3.getInt("itemid"));
					auctions.add(auction);
				}
			}
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List getItemsByType(String itemType) {
		
		/*
		 * The students code to fetch data from the database will be written here
		 * The itemType, which is the item's type on which the query has to be implemented, is given as method parameter
		 * Query to fetch items containing itemType as their type has to be implemented
		 * Each item's corresponding auction data also has to be fetched
		 * Each item record is required to be encapsulated as a "Item" class object and added to the "items" List
		 * Each auction record is required to be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and returned
		 */

		List output = new ArrayList();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();              
				
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String itemByTypeQuery = "SELECT i.itemID,\r\n"
					+ "      i.name,\r\n"
					+ "      i.type,\r\n"
					+ "      i.available_copy,\r\n"
					+ "      a.auctionid,\r\n"
					+ "      a.bidincrement,\r\n"
					+ "      a.minimubid,\r\n"
					+ "      a.copies_sold\r\n"
					+ "FROM items i\r\n"
					+ "        INNER JOIN auction a ON i.itemID = a.itemid\r\n"
					+ "WHERE i.type =" + itemType + "\r\n"
					+ " AND i.available_copy > 0;\r\n";
		   String getItemIDsofTypeQuery = "SELECT * FROM item WHERE type = " + itemType;
		   ResultSet r1 = st.executeQuery(itemByTypeQuery);
		   ResultSet r2 = st.executeQuery(getItemIDsofTypeQuery);
		   while(r2.next()) {
			   String getAuctionsofType = "SELECT * from auction WHERE itemid = " + r2.getInt("itemid");
			   ResultSet r3 = st.executeQuery(getAuctionsofType);
			   while(r3.next()) {
				   Auction auction = new Auction();
				   auction.setAuctionID(r3.getInt("auctionid"));
					auction.setBidIncrement(r3.getFloat("bidincrement"));
					auction.setMinimumBid(r3.getFloat("minimumbid"));
					auction.setCopiesSold(r3.getInt("copiesold"));
					auction.setMonitor(r3.getInt("monitor"));
					auction.setItemID(r3.getInt("itemid"));
					auctions.add(auction);
			   }
		   }
		 while(r2.next()) {
			 Item item = new Item();
				item.setDescription(r2.getString("Description"));
				item.setItemID(r2.getInt("itemid"));
				item.setName(r2.getString("itemname"));
				item.setNumCopies(r2.getInt("numcopies"));
				item.setSoldPrice(r2.getInt("soldprice"));
				item.setType(r2.getString("type"));
				item.setYearManufactured(r2.getInt("yearmanufactured"));
				items.add(item);
		 }
			
		}
		
		
		
		catch(Exception e) {
			System.out.println(e);
		}	
		
		
		
		/*Sample data ends*/
		
		output.add(items);
		output.add(auctions);
		
		return output;
	}

	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here.
		 * Each record is required to be encapsulated as a "Item" class object and added to the "items" ArrayList.
		 * Query to get the Best-seller list of items for a particular customer, indicated by the customerID, has to be implemented
		 * The customerID, which is the customer's ID for whom the Best-seller items have to be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();
				
		/*Sample data begins*/
		try {
			Class.forName("com.mysql.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/demo", "root", "Videogames123456789!");
			Statement st = con.createStatement();
			String getBestSellerItemsQuery = "SELECT i.name, COUNT(i.name) AS sold_count\r\n"
					+ "FROM bid b\r\n"
					+ "        RIGHT JOIN auction a ON a.auctionid = b.auction_id\r\n"
					+ "        LEFT JOIN items i ON a.itemid = i.itemID\r\n"
					+ "WHERE b.sold = TRUE\r\n"
					+ "GROUP BY i.name\r\n"
					+ "ORDER BY sold_count DESC\r\n"
					+ "LIMIT 5;\r\n"
					+ "";
			ResultSet rs = st.executeQuery(getBestSellerItemsQuery);
			while(rs.next()) {
				Item item = new Item();
				item.setDescription(rs.getString("Description"));
				item.setItemID(rs.getInt("itemid"));
				item.setName(rs.getString("itemname"));
				item.setNumCopies(rs.getInt("numcopies"));
				item.setSoldPrice(rs.getInt("soldprice"));
				item.setType(rs.getString("type"));
				item.setYearManufactured(rs.getInt("yearmanufactured"));
				items.add(item);
			}
		}
		
		catch(Exception e) {
			System.out.println(e);
		}
		
		/*Sample data ends*/
		
		return items;

	}

}
